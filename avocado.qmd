---
title: "Avocado Pricing in R"
author: "Husnain Mustafa"
date: "06/02/2024"
format:
  html:
    code-fold: true
theme: darkly
---

# Loading Data:

## Loading Libraries and Data Files
```{r}
#| message = FALSE
library(tidyverse)
library(ggplot2)
library(naniar)
```
```{r}
#| message = FALSE
data <- read_csv('data/avocado.csv')
head(data)
```

# Dataset Infomation:
Data Dimensions
```{r}
dim(data)
```
Column Names:
```{r}
colnames(data)
```
Structure:
```{r}
str(data)
```
Missing Data:
```{r}
# Load necessary libraries
library(ggplot2)
library(reshape2)

# Assuming 'data' is your dataframe
# Melt the dataframe to long format
data_melt <- melt(is.na(data))

# Create a heatmap
ggplot(data_melt, aes(x = Var2, y = Var1, fill = value)) + 
  geom_tile() + 
  scale_fill_manual(values = c("TRUE" = "purple", "FALSE" = "black")) + 
  theme_minimal() + 
  theme(axis.text.x = element_text(angle = 90, hjust = 1), 
        legend.position = "none")
```
Numerical Summary
```{r}
data %>% 
  summary()
```
Agregating data for weeks.
```{r}
#| message = FALSE
library(lubridate)

# Create a deep copy of the data frame
df1 <- data

# Convert the 'Date' column to Date type
df1$Date <- ymd(df1$Date)

# Arrange the data by Date and create a week column
df1 <- df1 %>% 
  arrange(Date) %>% 
  mutate(week = floor_date(Date, "week"))

# Group by the week column and summarise the numeric columns
df1 <- df1 %>%
  group_by(week) %>% 
  summarise(across(where(is.numeric), ~sum(., na.rm = TRUE)))

# Display the first few rows of the resulting data frame
head(df1)
```
Plotting Data distribution for Average Price.
```{r}
# Load necessary libraries
library(ggplot2)
library(gridExtra)

# Assuming 'data' and 'df1' are your dataframes

# Color palette
color1 <- c('#296C92', '#3EB489')

# First subplot: Distribution of AveragePrice in 'data'
p1 <- ggplot(data, aes(x = AveragePrice)) +
  geom_histogram(aes(y = ..density..), bins = 30, fill = color1[1], alpha = 0.6) +
  geom_density(color = color1[1], size = 1) +
  ggtitle('Distribution: AveragePrice') +
  theme_minimal()

# Second subplot: Distribution of AveragePrice in 'df1'
p2 <- ggplot(df1, aes(x = AveragePrice)) +
  geom_histogram(aes(y = ..density..), bins = 30, fill = color1[2], alpha = 0.6) +
  geom_density(color = color1[2], size = 1) +
  ggtitle('Distribution: AveragePrice') +
  theme_minimal()

# Arrange the first two plots side by side
grid.arrange(p1, p2, ncol = 2)

# Third subplot: Line plot of AveragePrice vs Date in 'df1'
# Assuming 'Date' is a column in 'df1'
p3 <- ggplot(df1, aes(x = week, y = AveragePrice, group = 1)) +
  geom_line(color = color1[1]) +
  ggtitle('AveragePrice vs Date') +
  theme_minimal()

# Display the third plot
grid.arrange(p3, ncol = 1)


```
Listing columns by data types.
```{r}
# Get column names
col <- names(data)

# Initialize lists to store categorical and numerical features
categorical_features <- c()
numerical_features <- c()

# Iterate through columns
for (i in col) {
    if (length(unique(data[[i]])) > 6) {
        numerical_features <- c(numerical_features, i)
    } else {
        categorical_features <- c(categorical_features, i)
    }
}

# Remove specific features from numerical features
numerical_features <- numerical_features[!numerical_features %in% c('Date', 'AveragePrice', 'region')]

# Print categorical and numerical features
cat('Categorical Features:', paste(categorical_features, collapse = ', '), '\n')
cat('Numerical Features:', paste(numerical_features, collapse = ', '), '\n')
```
Plotting distribution by year.
```{r}
# Load necessary libraries
library(ggplot2)
library(gridExtra)

# Convert 'type' column to factor using LabelEncoder
data$type <- as.factor(data$type)

# Create subplots for distribution and count plots
p_distribution <- lapply(categorical_features, function(feature) {
  ggplot(data, aes(x = !!sym(feature))) +
    geom_density(fill = "#296C92", alpha = 0.6) +
    ggtitle(paste("Distribution:", feature)) +
    theme_minimal()
})

p_count <- lapply(categorical_features, function(feature) {
  ggplot(data, aes(x = !!sym(feature), fill = !!sym(feature))) +
    geom_bar() +
    scale_fill_manual(values = c("#296C92", "#3EB489")) +
    ggtitle(paste("Count:", feature)) +
    theme_minimal()
})

# Combine plots into grid
grid.arrange(grobs = p_distribution, ncol = 2)
grid.arrange(grobs = p_count, ncol = 2)

```

Categorical Features vs Target Variable (AveragePrice) :
```{r}
# Load necessary libraries
library(ggplot2)
library(gridExtra)

# Assuming 'data' is your dataframe and 'categorical_features' is your list of categorical features
# Define your color palette
color1 <- c('#296C92', '#3EB489')

# Create a list to hold the plots
plots <- list()

# Loop through each categorical feature and create a bar plot
for (i in seq_along(categorical_features)) {
  p <- ggplot(data, aes_string(x = categorical_features[i], y = 'AveragePrice', fill = categorical_features[i])) +
    geom_bar(stat = "summary", fun = "mean", color = 'black', fill = color1[i %% length(color1) + 1]) +
    ggtitle(paste(categorical_features[i], 'vs AveragePrice')) +
    theme_minimal() +
    theme(legend.position = "none")
  
  plots[[i]] <- p
}

# Arrange the plots side by side
do.call(grid.arrange, c(plots, ncol = 2))

```
Numerical Features :
Distribution of Numerical Features :
```{r}
# Load necessary libraries
library(ggplot2)

# Assuming 'df1' is your dataframe and 'numerical_features' is your list of numerical features

# Determine the total number of features
total_features <- length(numerical_features)

# Determine the number of full rows needed
n_full_rows <- floor(total_features / 2)

# Loop through each numerical feature and create a distribution plot
for (i in seq(1, by = 2, length.out = n_full_rows)) {
  p1 <- ggplot(df1, aes_string(x = paste0('`', numerical_features[i], '`'))) +
    geom_histogram(aes(y = ..density..), bins = 30, fill = '#296C92', alpha = 0.6) +
    geom_density(color = '#3EB489', size = 1) +
    ggtitle(paste('Distribution:', numerical_features[i])) +
    theme_minimal()
  
  # Check if there's a second plot to add
  if (i + 1 <= total_features) {
    p2 <- ggplot(df1, aes_string(x = paste0('`', numerical_features[i + 1], '`'))) +
      geom_histogram(aes(y = ..density..), bins = 30, fill = '#296C92', alpha = 0.6) +
      geom_density(color = '#3EB489', size = 1) +
      ggtitle(paste('Distribution:', numerical_features[i + 1])) +
      theme_minimal()
    
    grid.arrange(p1, p2, ncol = 2)
  } else {
    # If there's only one plot left, print it as the last plot in a row
    print(p1)
  }
}

# If there's an odd number of features, print the last feature alone
if (total_features %% 2 != 0) {
  last_feature_index <- total_features
  last_p <- ggplot(df1, aes_string(x = paste0('`', numerical_features[last_feature_index], '`'))) +
    geom_histogram(aes(y = ..density..), bins = 30, fill = '#296C92', alpha = 0.6) +
    geom_density(color = '#3EB489', size = 1) +
    ggtitle(paste('Distribution:', numerical_features[last_feature_index])) +
    theme_minimal()
  
  print(last_p)
}



```
```{r}
# Load necessary libraries
library(dplyr)
library(ggplot2)

# Assuming your data is in a dataframe named 'data'

# Calculate percentages for each feature based on type
total_volume <- sum(data[data$type == 'conventional',]$`Total Volume`) / sum(data$`Total Volume`) * 100
total_volume <- c(total_volume, sum(data[data$type == 'organic',]$`Total Volume`) / sum(data$`Total Volume`) * 100)

avocado_4046 <- sum(data[data$type == 'conventional',]$`4046`) / sum(data$`4046`) * 100
avocado_4046 <- c(avocado_4046, sum(data[data$type == 'organic',]$`4046`) / sum(data$`4046`) * 100)

avocado_4225 <- sum(data[data$type == 'conventional',]$`4225`) / sum(data$`4225`) * 100
avocado_4225 <- c(avocado_4225, sum(data[data$type == 'organic',]$`4225`) / sum(data$`4225`) * 100)

avocado_4770 <- sum(data[data$type == 'conventional',]$`4770`) / sum(data$`4770`) * 100
avocado_4770 <- c(avocado_4770, sum(data[data$type == 'organic',]$`4770`) / sum(data$`4770`) * 100)

total_bags <- sum(data[data$type == 'conventional',]$`Total Bags`) / sum(data$`Total Bags`) * 100
total_bags <- c(total_bags, sum(data[data$type == 'organic',]$`Total Bags`) / sum(data$`Total Bags`) * 100)

small_bags <- sum(data[data$type == 'conventional',]$`Small Bags`) / sum(data$`Small Bags`) * 100
small_bags <- c(small_bags, sum(data[data$type == 'organic',]$`Small Bags`) / sum(data$`Small Bags`) * 100)

large_bags <- sum(data[data$type == 'conventional',]$`Large Bags`) / sum(data$`Large Bags`) * 100
large_bags <- c(large_bags, sum(data[data$type == 'organic',]$`Large Bags`) / sum(data$`Large Bags`) * 100)

xlarge_bags <- sum(data[data$type == 'conventional',]$`XLarge Bags`) / sum(data$`XLarge Bags`) * 100
xlarge_bags <- c(xlarge_bags, sum(data[data$type == 'organic',]$`XLarge Bags`) / sum(data$`XLarge Bags`) * 100)

# Combine percentages into a data frame
type_numerical_features_percentage <- data.frame(
  feature = rep(c("Total Volume", "4046", "4225", "4770", "Total Bags", "Small Bags", "Large Bags", "XLarge Bags"), each = 2),
  type = rep(c("Conventional", "Organic"), times = 8),
  percentage = c(total_volume, avocado_4046, avocado_4225, avocado_4770, total_bags, small_bags, large_bags, xlarge_bags)
)

# Create the plot
ggplot(type_numerical_features_percentage, aes(x = feature, y = percentage, fill = type)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), 
            position = position_dodge(width = 0.9), 
            vjust = -0.5, size = 3) +
  labs(title = "Percentage Contribution by Feature Type", 
       fill = "Type", 
       x = "Feature", 
       y = "Percentage") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5))


```
```{r}

# Load necessary libraries
library(dplyr)
library(ggplot2)
library(gridExtra)

# Assume `data` is already loaded as a data frame with the same structure

# Calculate percentages for each numerical feature per year
total_volume <- data %>%
  group_by(year) %>%
  summarize(Total_Volume = sum(`Total Volume`)) %>%
  mutate(Percentage = Total_Volume / sum(Total_Volume) * 100)

avocado_4046 <- data %>%
  group_by(year) %>%
  summarize(avocado_4046 = sum(`4046`)) %>%
  mutate(Percentage = avocado_4046 / sum(avocado_4046) * 100)

avocado_4225 <- data %>%
  group_by(year) %>%
  summarize(avocado_4225 = sum(`4225`)) %>%
  mutate(Percentage = avocado_4225 / sum(avocado_4225) * 100)

avocado_4770 <- data %>%
  group_by(year) %>%
  summarize(avocado_4770 = sum(`4770`)) %>%
  mutate(Percentage = avocado_4770 / sum(avocado_4770) * 100)

total_bags <- data %>%
  group_by(year) %>%
  summarize(Total_Bags = sum(`Total Bags`)) %>%
  mutate(Percentage = Total_Bags / sum(Total_Bags) * 100)

small_bags <- data %>%
  group_by(year) %>%
  summarize(Small_Bags = sum(`Small Bags`)) %>%
  mutate(Percentage = Small_Bags / sum(Small_Bags) * 100)

large_bags <- data %>%
  group_by(year) %>%
  summarize(Large_Bags = sum(`Large Bags`)) %>%
  mutate(Percentage = Large_Bags / sum(Large_Bags) * 100)

xlarge_bags <- data %>%
  group_by(year) %>%
  summarize(XLarge_Bags = sum(`XLarge Bags`)) %>%
  mutate(Percentage = XLarge_Bags / sum(XLarge_Bags) * 100)

# Combine all percentages into one data frame for easier plotting
percentage_data <- data.frame(
  year = rep(2015:2018, 8),
  feature = rep(c("Total Volume", "4046", "4225", "4770", "Total Bags", "Small Bags", "Large Bags", "XLarge Bags"), each = 4),
  percentage = c(total_volume$Percentage, avocado_4046$Percentage, avocado_4225$Percentage,
                 avocado_4770$Percentage, total_bags$Percentage, small_bags$Percentage,
                 large_bags$Percentage, xlarge_bags$Percentage)
)

# Define colors
color1 <- c("#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3")

# Create labels for pie chart segments
percentage_data <- percentage_data %>%
  group_by(feature) %>%
  mutate(ypos = cumsum(percentage) - 0.5 * percentage)

# Function to create individual pie charts
create_pie_chart <- function(feature_name) {
  ggplot(percentage_data %>% filter(feature == feature_name), aes(x = "", y = percentage, fill = factor(year))) +
    geom_bar(stat = "identity", width = 1, color = "black") +
    coord_polar(theta = "y") +
    geom_text(aes(y = ypos, label = sprintf("%.1f%%", percentage)), color = "black", size = 3) +
    scale_fill_manual(values = color1) +
    theme_void() +
    theme(
      strip.text = element_text(size = 12, face = "bold"),
      legend.position = "bottom"
    ) +
    labs(fill = "Year", title = feature_name)
}

# Create individual pie charts
plots <- lapply(unique(percentage_data$feature), create_pie_chart)

# Arrange pie charts in a grid of 2
grid_plots <- lapply(seq(1, length(plots), by = 2), function(i) {
  grid.arrange(grobs = plots[i:min(i+1, length(plots))], ncol = 2)
})

# Display the plots
for (g in grid_plots) {
  print(g)
}
```
```{r}
# Load necessary libraries
library(ggplot2)
library(gridExtra)

# Assume ⁠ df1 ⁠ is already loaded as a data frame with the same structure

# Create individual line plots
plot1 <- ggplot(df1, aes(x = week, y = AveragePrice)) +
  geom_line() +
  labs(title = "AveragePrice vs Date", x = "Date", y = "AveragePrice") +
  theme_minimal()

plot2 <- ggplot(df1, aes(x = week, y = `Total Volume`)) +
  geom_line() +
  labs(title = "Total Volume vs Date", x = "Date", y = "Total Volume") +
  theme_minimal()

plot3 <- ggplot(df1, aes(x = week, y = `Total Bags`)) +
  geom_line() +
  labs(title = "Total Bags vs Date", x = "Date", y = "Total Bags") +
  theme_minimal()

# Arrange plots in a single column layout
grid.arrange(plot1, plot2, plot3, ncol = 1)
```
```{r}
# Load necessary libraries
library(ggplot2)
library(gridExtra)

# Assume ⁠ df1 ⁠ is already loaded as a data frame with the same structure

# List of features to plot
l2 <- c('`4046`', '`4225`', '`4770`', '`Small Bags`', '`Large Bags`', '`XLarge Bags`')

# Create individual line plots
plots <- lapply(l2, function(feature) {
  ggplot(df1, aes_string(x = "week", y = feature)) +
    geom_line() +
    labs(title = paste(feature, "vs Date"), x = "Date", y = feature) +
    theme_minimal()
})

# Arrange plots in a grid layout of 3 rows and 2 columns
grid.arrange(grobs = plots, nrow = 3, ncol = 2)
```

```{r}
# Load necessary library
library(ggplot2)

# Define the color palette
color2 <- c('#DF3C22','#203EB9', '#F5EE04','#50CD27')

# Create the point plot with adjusted dimensions
ggplot(data, aes(y=`Total Volume`, x = region, color = factor(year), group = year)) +
  geom_point(size = 2) +
  geom_line() +
  scale_color_manual(values = color2) +
  theme_minimal() +
  labs(title = "Total Volume vs Region by Year",
       x = "Total Volume",
       y = "Region",
       color = "Year") +
  theme(legend.position = "right", legend.title = element_text(size = 12),
        plot.title = element_text(size = 16),  # Adjust title font size
        plot.background = element_rect(fill = "white"),  # Set background color
        aspect.ratio = 0.4)+  # Adjust aspect ratio to make the plot longer 
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
```
```{r}
# Load necessary library
library(ggplot2)

# Define the color palette
color2 <- c('#DF3C22','#203EB9', '#F5EE04','#50CD27')

# Create the point plot with adjusted dimensions
ggplot(data, aes(y=`Total Volume`, x = region, color = type, group = year)) +
  geom_point(size = 2) +
  geom_line() +
  scale_color_manual(values = color2) +
  theme_minimal() +
  labs(title = "Total Volume vs Region by Year",
       x = "Total Volume",
       y = "Region",
       color = "Year") +
  theme(legend.position = "right", legend.title = element_text(size = 12),
        plot.title = element_text(size = 16),  # Adjust title font size
        plot.background = element_rect(fill = "white"),  # Set background color
        aspect.ratio = 0.4)+  # Adjust aspect ratio to make the plot longer 
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
```
```{r}
# Load necessary library
library(ggplot2)

# Define the color palette
color2 <- c('#DF3C22','#203EB9', '#F5EE04','#50CD27')

# Create the point plot with adjusted dimensions
ggplot(data, aes(y=`Total Bags`, x = region, color = factor(year), group = year)) +
  geom_point(size = 2) +
  geom_line() +
  scale_color_manual(values = color2) +
  theme_minimal() +
  labs(title = "Total Volume vs Region by Year",
       x = "Total Volume",
       y = "Region",
       color = "Year") +
  theme(legend.position = "right", legend.title = element_text(size = 12),
        plot.title = element_text(size = 16),  # Adjust title font size
        plot.background = element_rect(fill = "white"),  # Set background color
        aspect.ratio = 0.4)+  # Adjust aspect ratio to make the plot longer 
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
```
```{r}
# Load necessary library
library(ggplot2)

# Define the color palette
color2 <- c('#DF3C22','#203EB9', '#F5EE04','#50CD27')

# Create the point plot with adjusted dimensions
ggplot(data, aes(y=`Total Bags`, x = region, color = type, group = year)) +
  geom_point(size = 2) +
  geom_line() +
  scale_color_manual(values = color2) +
  theme_minimal() +
  labs(title = "Total Volume vs Region by Year",
       x = "Total Volume",
       y = "Region",
       color = "Year") +
  theme(legend.position = "right", legend.title = element_text(size = 12),
        plot.title = element_text(size = 16),  # Adjust title font size
        plot.background = element_rect(fill = "white"),  # Set background color
        aspect.ratio = 0.4)+  # Adjust aspect ratio to make the plot longer 
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
```
Time Series Analysis :
```{r}
head(df1)
```

```{r}
col_names <- names(df1)
col_names <- col_names[col_names %in% c("AveragePrice","week")]

# Drop columns from df1 using indexing
df1 <- df1[, col_names]

# Show the first few rows of the modified df1
head(df1)
```
```{r}
library("forecast")

# Assuming df1 is your data frame with a column named 'AveragePrice'

# Convert df1['AveragePrice'] to a time series object
ts_data <- ts(df1$AveragePrice, frequency = 7)  # Assuming monthly data

# Decompose the time series using multiplicative model
decomposed <- decompose(ts_data, type = "multiplicative")

# Plot the decomposition
plot(decomposed)
```
```{r}
library(forecast)
library(urca)
# Define the function for testing stationarity
test_stationarity <- function(timeseries) {
  # Plot the time series
  plot(timeseries, main = "Original Time Series", ylab = "Value", xlab = "Time")
  
  # Perform Dickey-Fuller test
  df_test <- ndiffs(timeseries)
  print(paste("Number of Differences:", df_test))
  
  # Perform ADF test
  adf_test <- ur.df(timeseries, type = "trend", lags = 7, selectlags = "AIC")
  print(summary(adf_test))
}
test_stationarity(df1$AveragePrice)
```

```{r}
# Calculate the logarithm of 'AveragePrice'
df1$Log_AveragePrice <- log(df1$AveragePrice)

# Calculate the first difference of the logarithm
df1_log_diff <- diff(df1$Log_AveragePrice)
df1_log_diff <- df1_log_diff[-1]  # Remove the NA value created by diff()

# Decompose the time series using seasonal decomposition
decomposed <- decompose(ts(df1_log_diff, frequency = 52), type = "multiplicative")

# Plot the decomposition
plot(decomposed)
```

```{r}
test_stationarity(df1_log_diff)
```
```{r}
ts_data <- ts(df1$AveragePrice)
plot(ts_data)
acf(ts_data, lag.max=10, main="ACF")

```

```{r}
pacf(ts_data, lag.max=10, main="PACF")
```
```{r}
loggy=ts(df1_log_diff)
plot(loggy)
acf(loggy, lag.max=10, main="ACF")
pacf(loggy, lag.max=10, main="PACF")

```
```{r}
# Load necessary library
library(forecast)

# Assuming df1_log_averageprice is your time series data in R

# Fit ARIMA model
model <- Arima(df1$Log_AveragePrice, order = c(1,1,2))

# Summary of the fitted model
summary(model)

```
```{r}
# Fitted values of the model
predictions_ARIMA <- fitted(model)


predictions_ARIMA_final <- exp(predictions_ARIMA)

# Plotting the results
plot(df1$AveragePrice, type = "l", col = "blue", xlab = "Index", ylab = "Average Price", main = "Fitted Average Price")
lines(predictions_ARIMA_final, col = "red")
legend("topright", legend = c("Average Price", "Fitted Average Price"), col = c("blue", "red"), lty = 1)


```

```{r}
library(forecast)

size <- length(df1$Log_AveragePrice) - 30
train <- df1$Log_AveragePrice[1:size]
test <- df1$Log_AveragePrice[(size+1):length(df1)]

cat('\t ARIMA MODEL : In - Sample Forecasting \n\n')

history <- as.vector(train)
predictions <- numeric()

for (t in 1:length(test)) {
    
    model <- Arima(history, order=c(1,1,2))
    
    output <- forecast(model, h=1)
    yhat <- output$mean
    
    predictions <- c(predictions, yhat)
    
    obs <- test[t]
    history <- c(history, obs)
    
    cat('predicted = ', exp(yhat), ', expected = ', exp(obs), '\n')
}

```

```{r}
# Load the necessary package
library(forecast)

# Assuming df1 is your dataframe and Log_AveragePrice is the column of interest
# Fit the SARIMA model
model <- Arima(df1$Log_AveragePrice, order = c(1,1,2), seasonal = list(order = c(0,1,0), period = 52))


# Print the summary of the fitted model
summary(model)

```
```{r}
# Load necessary packages
library(forecast)

# Assuming df1 is your dataframe and Log_AveragePrice is the column of interest
# Split the data into training and testing sets
size <- nrow(df1) - 30
train <- df1$Log_AveragePrice[1:size]
test <- df1$Log_AveragePrice[(size+1):nrow(df1)]

cat("\t SARIMA MODEL : In - Sample Forecasting \n")

history <- as.numeric(train)
predictions <- c()

for (t in 1:length(test)) {
  model <- Arima(history, order = c(1,1,2), seasonal = list(order = c(0,1,0), period = 52))
  output <- forecast(model, h = 1)
  yhat <- output$mean[1]
  predictions <- c(predictions, yhat)
  
  obs <- test[t]
  history <- c(history, obs)
  
  cat(sprintf("predicted = %f, expected = %f\n", exp(yhat), exp(obs)))
}

```
```{r}
# Create a time series for predictions
predictions_series <- ts(predictions, start = start(test), frequency = frequency(test))

# Plot the expected and predicted values
df1$Date <- as.Date(df1$week)  # Assuming the row names are dates
df1$ExpectedValues <- df1$AveragePrice
df1$PredictedValues <- c(rep(NA, size), exp(predictions))

ggplot(df1, aes(x = Date)) +
  geom_line(aes(y = ExpectedValues, color = "Expected Values")) +
  geom_line(aes(y = PredictedValues, color = "Predicted Values")) +
  labs(title = "SARIMA Model: Expected vs Predicted Values",
       y = "Average Price",
       x = "Date") +
  scale_color_manual(name = "Legend", values = c("Expected Values" = "blue", "Predicted Values" = "red")) +
  theme_minimal()
```


