ts_data <- ts(df1$AveragePrice, frequency = 12)  # Assuming monthly data
# Decompose the time series using multiplicative model
decomposed <- decompose(ts_data, type = "multiplicative")
# Plot the decomposition
plot(decomposed)
library("forecast")
# Assuming df1 is your data frame with a column named 'AveragePrice'
# Convert df1['AveragePrice'] to a time series object
ts_data <- ts(df1$AveragePrice, frequency = 1)  # Assuming monthly data
# Decompose the time series using multiplicative model
decomposed <- decompose(ts_data, type = "multiplicative")
library("forecast")
# Assuming df1 is your data frame with a column named 'AveragePrice'
# Convert df1['AveragePrice'] to a time series object
ts_data <- ts(df1$AveragePrice, frequency = 7)  # Assuming monthly data
# Decompose the time series using multiplicative model
decomposed <- decompose(ts_data, type = "multiplicative")
# Plot the decomposition
plot(decomposed)
library(forecast)
# Define the function for testing stationarity
test_stationarity <- function(timeseries) {
# Plot the time series
plot(timeseries, main = "Original Time Series", ylab = "Value", xlab = "Time")
# Perform Dickey-Fuller test
df_test <- ndiffs(timeseries)
print(paste("Number of Differences:", df_test))
# Perform ADF test
adf_test <- ur.df(timeseries, type = "trend", lags = 7, selectlags = "AIC")
print(summary(adf_test))
}
test_stationarity(df1$AveragePrice)
library(urca)
library(forecast)
library(urca)
# Define the function for testing stationarity
test_stationarity <- function(timeseries) {
# Plot the time series
plot(timeseries, main = "Original Time Series", ylab = "Value", xlab = "Time")
# Perform Dickey-Fuller test
df_test <- ndiffs(timeseries)
print(paste("Number of Differences:", df_test))
# Perform ADF test
adf_test <- ur.df(timeseries, type = "trend", lags = 7, selectlags = "AIC")
print(summary(adf_test))
}
test_stationarity(df1$AveragePrice)
# Calculate the logarithm of 'AveragePrice'
df1$Log_AveragePrice <- log(df1$AveragePrice)
# Calculate the first difference of the logarithm
df1_log_diff <- diff(df1$Log_AveragePrice)
df1_log_diff <- df1_log_diff[-1]  # Remove the NA value created by diff()
# Decompose the time series using seasonal decomposition
decomposed <- decompose(ts(df1_log_diff, frequency = 52), type = "multiplicative")
# Plot the decomposition
plot(decomposed)
test_stationarity(df1_log_diff)
ts_data <- ts(df1$AveragePrice)
# Plot ACF and PACF with lag up to 10
par(mfrow=c(2,1))
acf(ts_data, lag.max=10, main="ACF")
pacf(ts_data, lag.max=10, main="PACF")
ts_data <- ts(df1$AveragePrice)
# Plot ACF and PACF with lag up to 10
par(mfrow=c(2,1))
acf(ts_data, lag.max=10, main="ACF")
ts_data <- ts(df1$AveragePrice)
acf(ts_data, lag.max=10, main="ACF")
pacf(ts_data, lag.max=10, main="PACF")
ts(df1_log_diff)
loggy=ts(df1_log_diff)
loggy=ts(df1_log_diff)
plot(loggy)
ts_data <- ts(df1$AveragePrice)
plot(ts_data)
acf(ts_data, lag.max=10, main="ACF")
loggy=ts(df1_log_diff)
plot(loggy)
acf(loggy, lag.max=10, main="ACF")
pacf(loggy, lag.max=10, main="PACF")
model_fit <- auto.arima(loggy, order = c(1, 1, 2))
model_fit <- myarima(x, order = c(p[1], p[2], p[3]),
seasonal = c(P, D, Q), constant = constant)
model <- auto.arima(Log_AveragePrice, order = c(1,1,2))
model <- auto.arima(df1_log_diff, order = c(1,1,2))
model <- auto.arima(df1_log_diff)
summary(model)
model <- auto.arima(df1_log_diff,d = 1, p = 1, q = 2)
model <- auto.arima(df1_log_diff,d = 1, p = 1)
summary(model)
model <- auto.arima(df1_log_diff,d = 1, p = 1,max.q = 2)
summary(model)
model <- auto.arima(df1_log_diff,d = 1, p = 1,q = 2)
model <- auto.arima(df1_log_diff,d = 1, max.p = 1,max.q = 2)
summary(model)
# Load necessary library
library(forecast)
# Assuming df1_log_averageprice is your time series data in R
# Fit ARIMA model
model <- Arima(df1_log_averageprice, order = c(1,1,2))
# Load necessary library
library(forecast)
# Assuming df1_log_averageprice is your time series data in R
# Fit ARIMA model
model <- Arima(df1_log_diff, order = c(1,1,2))
# Summary of the fitted model
summary(model)
# Load necessary library
library(forecast)
# Assuming df1_log_averageprice is your time series data in R
# Fit ARIMA model
model <- Arima(df1$Log_AveragePrice, order = c(1,1,2))
# Summary of the fitted model
summary(model)
# Fitted values of the model
predictions_ARIMA <- fitted(model)
# Reversing the 1st order Differencing by taking cumulative sum
predictions_ARIMA_cumsum <- cumsum(predictions_ARIMA)
# Creating a vector with the same length as the original 'Log_AveragePrice'
# All the elements of this new vector are same as the 1st element of the original 'Log_AveragePrice'
expected_log_values <- rep(df1_log_averageprice[1], length(df1_log_averageprice))
# Fitted values of the model
predictions_ARIMA <- fitted(model)
# Reversing the 1st order Differencing by taking cumulative sum
predictions_ARIMA_cumsum <- cumsum(predictions_ARIMA)
# Creating a vector with the same length as the original 'Log_AveragePrice'
# All the elements of this new vector are same as the 1st element of the original 'Log_AveragePrice'
expected_log_values <- rep(df1$Log_AveragePrice[1], length(df1$Log_AveragePrice))
# Adding the elements of this newly created vector with the cumulative sum vector
expected_log_values <- expected_log_values + predictions_ARIMA_cumsum
# Taking exponential of the above vector for getting the original values
predictions_ARIMA_final <- exp(expected_log_values)
# Plotting
plot(df1$AveragePrice, type = "l", col = "blue", xlab = "Time", ylab = "Average Price", main = "")
lines(predictions_ARIMA_final, col = "red")
legend("topleft", legend = c("Average Price", "Fitted Average Price"), col = c("blue", "red"))
predictions_ARIMA_final
# Fitted values of the model
predictions_ARIMA <- cumsum(fitted(model))
# Creating a series with the same length as the original 'Log_AveragePrice'
# All the elements of this new series are the same as the 1st element of the original 'Log_AveragePrice'
expected_log_values <- rep(df1$Log_AveragePrice[1], length(df1$Log_AveragePrice))
# Adding the elements of this newly created series with the cumulative sum series
expected_log_values <- expected_log_values + predictions_ARIMA
# Taking the exponential of the above series to get the original values
predictions_ARIMA_final <- exp(expected_log_values)
# Plotting the results
plot(df1$AveragePrice, type = "l", col = "blue", xlab = "Index", ylab = "Average Price", main = "Fitted Average Price")
lines(predictions_ARIMA_final, col = "red")
legend("topright", legend = c("Average Price", "Fitted Average Price"), col = c("blue", "red"), lty = 1)
predictions_ARIMA_final
fitted(model)
cumsum(fitted(model))
expected_log_values
expected_log_values <- rep(df1$Log_AveragePrice[1], length(df1$Log_AveragePrice))
expected_log_values
# Load necessary library
library(forecast)
# Assuming df1_log_averageprice is your time series data in R
# Fit ARIMA model
model <- Arima(Log_AveragePrice, order = c(1,1,2))
# Load necessary library
library(forecast)
# Assuming df1_log_averageprice is your time series data in R
# Fit ARIMA model
model <- Arima(df1_log_diff, order = c(1,1,2))
# Summary of the fitted model
summary(model)
# Fitted values of the model
predictions_ARIMA <- cumsum(fitted(model))
# Creating a series with the same length as the original 'Log_AveragePrice'
# All the elements of this new series are the same as the 1st element of the original 'Log_AveragePrice'
expected_log_values <- rep(df1$Log_AveragePrice[1], length(df1$Log_AveragePrice))
# Adding the elements of this newly created series with the cumulative sum series
expected_log_values <- expected_log_values + predictions_ARIMA
# Taking the exponential of the above series to get the original values
predictions_ARIMA_final <- exp(expected_log_values)
# Plotting the results
plot(df1$AveragePrice, type = "l", col = "blue", xlab = "Index", ylab = "Average Price", main = "Fitted Average Price")
lines(predictions_ARIMA_final, col = "red")
legend("topright", legend = c("Average Price", "Fitted Average Price"), col = c("blue", "red"), lty = 1)
df1$AveragePrice
# Load necessary library
library(forecast)
# Assuming df1_log_averageprice is your time series data in R
# Fit ARIMA model
model <- Arima(df1$Log_AveragePrice, order = c(1,1,2))
# Summary of the fitted model
summary(model)
# Fitted values of the model
predictions_ARIMA <- cumsum(fitted(model))
# Creating a series with the same length as the original 'Log_AveragePrice'
# All the elements of this new series are the same as the 1st element of the original 'Log_AveragePrice'
expected_log_values <- rep(df1$Log_AveragePrice[1], length(df1$Log_AveragePrice))
# Adding the elements of this newly created series with the cumulative sum series
expected_log_values <- expected_log_values + predictions_ARIMA
# Taking the exponential of the above series to get the original values
predictions_ARIMA_final <- exp(expected_log_values)
# Plotting the results
plot(df1$AveragePrice, type = "l", col = "blue", xlab = "Index", ylab = "Average Price", main = "Fitted Average Price")
lines(predictions_ARIMA_final, col = "red")
legend("topright", legend = c("Average Price", "Fitted Average Price"), col = c("blue", "red"), lty = 1)
# Fitted values of the model
predictions_ARIMA <- cumsum(fitted(model))
# Creating a series with the same length as the original 'Log_AveragePrice'
# All the elements of this new series are the same as the 1st element of the original 'Log_AveragePrice'
expected_log_values <- rep(df1$Log_AveragePrice[1], length(df1$Log_AveragePrice))
# Adding the elements of this newly created series with the cumulative sum series
expected_log_values <- expected_log_values + predictions_ARIMA
# Taking the exponential of the above series to get the original values
predictions_ARIMA_final <- exp(expected_log_values)
# Plotting the results
plot(df1$AveragePrice, type = "l", col = "blue", xlab = "Index", ylab = "Average Price", main = "Fitted Average Price")
lines(predictions_ARIMA_final, col = "red")
legend("topright", legend = c("Average Price", "Fitted Average Price"), col = c("blue", "red"), lty = 1)
# Fitted values of the model
predictions_ARIMA <- fitted(model)
# Creating a series with the same length as the original 'Log_AveragePrice'
# All the elements of this new series are the same as the 1st element of the original 'Log_AveragePrice'
expected_log_values <- rep(df1$Log_AveragePrice[1], length(df1$Log_AveragePrice))
# Adding the elements of this newly created series with the cumulative sum series
expected_log_values <- expected_log_values + predictions_ARIMA
# Taking the exponential of the above series to get the original values
predictions_ARIMA_final <- exp(expected_log_values)
# Plotting the results
plot(df1$AveragePrice, type = "l", col = "blue", xlab = "Index", ylab = "Average Price", main = "Fitted Average Price")
lines(predictions_ARIMA_final, col = "red")
legend("topright", legend = c("Average Price", "Fitted Average Price"), col = c("blue", "red"), lty = 1)
expected_log_values
predictions_ARIMA_final
predictions_ARIMA
exp(predictions_ARIMA)
# Fitted values of the model
predictions_ARIMA <- fitted(model)
predictions_ARIMA_final <- exp(predictions_ARIMA)
# Plotting the results
plot(df1$AveragePrice, type = "l", col = "blue", xlab = "Index", ylab = "Average Price", main = "Fitted Average Price")
lines(predictions_ARIMA_final, col = "red")
legend("topright", legend = c("Average Price", "Fitted Average Price"), col = c("blue", "red"), lty = 1)
accuracy(model)
# Load necessary library
library(forecast)
# Assuming df1_log_averageprice is your time series data in R
# Fit ARIMA model
model <- Arima(df1$Log_AveragePrice, order = c(1,1,2))
# Summary of the fitted model
summary(model)
# Generate predictions
predictions <- forecast(model)
# Extract actual values
actual_values <- df1$Log_AveragePrice
# Plot actual vs predicted values
plot(actual_values, type = "l", col = "blue", ylim = c(min(predictions$lower), max(predictions$upper)), xlab = "Time", ylab = "Log Average Price")
lines(predictions$mean, col = "red")
lines(predictions$upper, col = "green", lty = 2)
# Load necessary library
library(forecast)
# Assuming df1_log_averageprice is your time series data in R
# Fit ARIMA model
model <- Arima(df1$Log_AveragePrice, order = c(1,1,2))
# Summary of the fitted model
summary(model)
# Generate predictions
predictions <- forecast(model)
# Extract actual values
actual_values <- df1$Log_AveragePrice
# Trim predictions to match the length of actual values
predictions <- head(predictions, length(actual_values))
# Plot actual vs predicted values
plot(actual_values, type = "l", col = "blue", ylim = c(min(predictions$lower), max(predictions$upper)), xlab = "Time", ylab = "Log Average Price")
lines(predictions$mean, col = "red")
lines(predictions$upper, col = "green", lty = 2)
# Generate predictions
predictions <- forecast(model)
# Extract actual values
actual_values <- df1$Log_AveragePrice
# Trim predictions to match the length of actual values
predictions <- head(predictions$mean, length(actual_values))
# Plot actual vs predicted values
plot(actual_values, type = "l", col = "blue", ylim = c(min(c(actual_values, predictions)), max(c(actual_values, predictions))), xlab = "Time", ylab = "Log Average Price")
lines(predictions, col = "red")
legend("topleft", legend = c("Actual", "Predicted"), col = c("blue", "red"), lty = 1)
# Generate predictions
# Generate predictions
predictions <- forecast(model)
# Extract actual values
actual_values <- df1$Log_AveragePrice
# Plot actual vs predicted values
plot(actual_values, type = "l", col = "blue", ylim = c(min(c(actual_values, predictions$mean)), max(c(actual_values, predictions$mean))), xlab = "Time", ylab = "Log Average Price")
lines(predictions$mean, col = "red")
legend("topleft", legend = c("Actual", "Predicted"), col = c("blue", "red"), lty = 1)
# Generate predictions
predictions <- forecast(model)
# Extract actual values
actual_values <- df1$Log_AveragePrice
# Plot actual values
plot(actual_values, type = "l", col = "blue", ylim = c(min(c(actual_values, predictions$mean)), max(c(actual_values, predictions$mean))), xlab = "Time", ylab = "Log Average Price")
# Plot predicted values starting from the end of actual data
lines(length(actual_values) + 1:length(predictions$mean), predictions$mean, col = "red")
# Add legend
legend("topleft", legend = c("Actual", "Predicted"), col = c("blue", "red"), lty = 1)
# Generate predictions
# Generate predictions
predictions <- forecast(model)
# Extract actual values
actual_values <- df1$Log_AveragePrice
# Plot actual vs predicted values
# Assuming predictions$mean contains the predicted values
plot(actual_values, type = "l", col = "blue", ylim = c(min(c(actual_values, predictions$mean)), max(c(actual_values, predictions$mean))), xlab = "Time", ylab = "Log Average Price")
lines(predictions$mean, col = "red")
# Add points for actual values (optional)
points(actual_values, pch = 16, col = "blue")  # Use points() for actual values
legend("topleft", legend = c("Actual", "Predicted"), col = c("blue", "red"), lty = 1)
# Generate predictions
# Generate predictions
predictions <- exp(forecast(model))
# Generate predictions
# Generate predictions
predictions <- forecast(model)
# Extract actual values
actual_values <- df1$Log_AveragePrice
# Plot actual vs predicted values
# Assuming predictions$mean contains the predicted values
plot(actual_values, type = "l", col = "blue", ylim = c(min(c(actual_values, predictions$mean)), max(c(actual_values, predictions$mean))), xlab = "Time", ylab = "Log Average Price")
lines(predictions$mean, col = "red")
# Add points for actual values (optional)
points(actual_values, pch = 16, col = "blue")  # Use points() for actual values
legend("topleft", legend = c("Actual", "Predicted"), col = c("blue", "red"), lty = 1)
# Generate predictions
# Generate predictions
predictions <- forecast(model)
predictions_orig<-exp(predictions)
library(forecast)
size <- length(df1) - 30
train <- df1$Log_AveragePrice[1:size]
length(df1)
library(forecast)
size <- length(df1$Log_AveragePrice) - 30
train <- df1$Log_AveragePrice[1:size]
test <- df1$Log_AveragePrice[(size+1):length(df1)]
cat('\t ARIMA MODEL : In - Sample Forecasting \n\n')
history <- as.vector(train)
predictions <- numeric()
for (t in 1:length(test)) {
model <- Arima(history, order=c(1,1,2))
output <- forecast(model, h=1)
yhat <- output$mean
predictions <- c(predictions, yhat)
obs <- test[t]
history <- c(history, obs)
cat('predicted = ', exp(yhat), ', expected = ', exp(obs), '\n')
}
library(ggplot2)
predictions_series <- ts(exp(predictions), start = start(test), end = end(test), frequency = frequency(test))
df1$index <- as.Date(df1$index)
library(ggplot2)
predictions_series <- ts(exp(predictions), start = start(test), end = end(test), frequency = frequency(test))
df1$index <- as.Date(df1$index)
library(ggplot2)
predictions_series <- ts(exp(predictions), start = start(test), end = end(test), frequency = frequency(test))
df1$index <- as.Date(df1$week)
ggplot() +
geom_line(data = df1, aes(x = week, y = AveragePrice), color = "blue", linetype = "solid", size = 1, alpha = 0.8) +
geom_line(data = data.frame(index = time(predictions_series), value = predictions_series), aes(x = index, y = value), color = "red", linetype = "solid", size = 1, alpha = 0.8) +
labs(x = "Date", y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +
ggtitle("Expected vs Predicted Values")
library(ggplot2)
predictions_series <- ts(exp(predictions), start = start(test), end = end(test), frequency = frequency(test))
df1$week <- as.Date(df1$week)
ggplot() +
geom_line(data = df1, aes(x = week, y = AveragePrice), color = "blue", linetype = "solid", size = 1, alpha = 0.8) +
geom_line(data = data.frame(index = time(predictions_series), value = predictions_series), aes(x = index, y = value), color = "red", linetype = "solid", size = 1, alpha = 0.8) +
labs(x = "Date", y = "Price") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +
ggtitle("Expected vs Predicted Values")
library(ggplot2)
df1$index <- as.Date(df1$index)
df_plot <- data.frame(index = df1$index,
AveragePrice = df1$AveragePrice,
PredictedValues = exp(predictions_series))
# Plot actual vs. predicted values
plot(test, type="l", col="blue", ylab="Log Price", main="ARIMA(1,1,2) In-Sample Forecast")
lines(predictions, col="red", lwd=2)
legend("topright", c("Actual", "Predicted"), col=c("blue", "red"), lty=1)
# Add reference line for actual values (optional)
abline(h=mean(test), col="gray", lty=2)
if (!require(statsmodels)) install.packages("statsmodels")
library(statsmodels)
# Load the necessary package
library(forecast)
# Assuming df1 is your dataframe and Log_AveragePrice is the column of interest
# Fit the SARIMA model
model <- Arima(df1$Log_AveragePrice, order = c(1,1,2), seasonal = c(0,1,0), period = 52)
# Load the necessary package
library(forecast)
# Assuming df1 is your dataframe and Log_AveragePrice is the column of interest
# Fit the SARIMA model
model <- Arima(df1$Log_AveragePrice, order = c(1,1,2), seasonal = c(0,1,0))
# Print the summary of the fitted model
summary(model)
# Load the necessary package
library(forecast)
# Assuming df1 is your dataframe and Log_AveragePrice is the column of interest
# Fit the SARIMA model
model <- Arima(df1$Log_AveragePrice, order = c(1,1,2), seasonal = list(order = c(0,1,0), period = 52))
# Print the summary of the fitted model
summary(model)
# Load necessary packages
library(forecast)
# Assuming df1 is your dataframe and Log_AveragePrice is the column of interest
# Split the data into training and testing sets
size <- nrow(df1) - 30
train <- df1$Log_AveragePrice[1:size]
test <- df1$Log_AveragePrice[(size+1):nrow(df1)]
cat("\t SARIMA MODEL : In - Sample Forecasting \n")
history <- as.numeric(train)
predictions <- c()
for (t in 1:length(test)) {
model <- Arima(history, order = c(1,1,2), seasonal = list(order = c(0,1,0), period = 52))
output <- forecast(model, h = 1)
yhat <- output$mean[1]
predictions <- c(predictions, yhat)
obs <- test[t]
history <- c(history, obs)
cat(sprintf("predicted = %f, expected = %f\n", exp(yhat), exp(obs)))
}
# Create a time series for predictions
predictions_series <- ts(predictions, start = start(test), frequency = frequency(test))
# Plot the expected and predicted values
df1$Date <- as.Date(rownames(df1))  # Assuming the row names are dates
# Create a time series for predictions
predictions_series <- ts(predictions, start = start(test), frequency = frequency(test))
# Plot the expected and predicted values
df1$Date <- as.Date(df1$week)  # Assuming the row names are dates
df1$ExpectedValues <- df1$AveragePrice
df1$PredictedValues <- c(rep(NA, size), exp(predictions))
ggplot(df1, aes(x = Date)) +
geom_line(aes(y = ExpectedValues, color = "Expected Values")) +
geom_line(aes(y = PredictedValues, color = "Predicted Values")) +
labs(title = "SARIMA Model: Expected vs Predicted Values",
y = "Average Price",
x = "Date") +
scale_color_manual(name = "Legend", values = c("Expected Values" = "blue", "Predicted Values" = "red")) +
theme_minimal()
# Fitted values of the model
fitted_values <- fitted(model)
# Reversing the 1st order Differencing by taking cumulative sum
fitted_cumsum <- cumsum(fitted_values)
# Creating a series with the same length as the original 'Log_AveragePrice'
# All the elements of this new series are same as the 1st element of the original 'Log_AveragePrice'
initial_value <- df1$Log_AveragePrice[1]
expected_log_values <- ts(rep(initial_value, length(fitted_values)), start = start(fitted_values), frequency = frequency(fitted_values))
# Adding the elements of this newly created series with the cumulative sum series
expected_log_values <- expected_log_values + fitted_cumsum
# Taking exp of the above series to get the original values
predictions_ARIMA_final <- exp(expected_log_values)
# Plot the results
ggplot(data = df1, aes(x = as.Date(row.names(df1)))) +
geom_line(aes(y = AveragePrice, color = "AveragePrice")) +
geom_line(aes(y = predictions_ARIMA_final, color = "Fitted AveragePrice")) +
labs(title = sprintf("RMSE: %.4f", sqrt(mean((predictions_ARIMA_final - df1$AveragePrice)^2))),
y = "Average Price",
x = "Date") +
scale_color_manual(name = "Legend", values = c("AveragePrice" = "blue", "Fitted AveragePrice" = "red")) +
theme_minimal()
# Fitted values of the model
fitted_values <- fitted(model)
# Reversing the 1st order Differencing by taking cumulative sum
fitted_cumsum <- cumsum(fitted_values)
# Creating a series with the same length as the original 'Log_AveragePrice'
# All the elements of this new series are same as the 1st element of the original 'Log_AveragePrice'
initial_value <- df1$Log_AveragePrice[1]
expected_log_values <- ts(rep(initial_value, length(fitted_values)), start = start(fitted_values), frequency = frequency(fitted_values))
# Adding the elements of this newly created series with the cumulative sum series
expected_log_values <- expected_log_values + fitted_cumsum
# Taking exp of the above series to get the original values
predictions_ARIMA_final <- exp(expected_log_values)
# Plot the results
ggplot(data = df1, aes(x = as.Date(df1$week)) +
geom_line(aes(y = AveragePrice, color = "AveragePrice")) +
geom_line(aes(y = predictions_ARIMA_final, color = "Fitted AveragePrice")) +
labs(title = sprintf("RMSE: %.4f", sqrt(mean((predictions_ARIMA_final - df1$AveragePrice)^2))),
y = "Average Price",
x = "Date") +
scale_color_manual(name = "Legend", values = c("AveragePrice" = "blue", "Fitted AveragePrice" = "red")) +
theme_minimal()
# Fitted values of the model
fitted_values <- fitted(model)
# Reversing the 1st order Differencing by taking cumulative sum
fitted_cumsum <- cumsum(fitted_values)
# Creating a series with the same length as the original 'Log_AveragePrice'
# All the elements of this new series are same as the 1st element of the original 'Log_AveragePrice'
initial_value <- df1$Log_AveragePrice[1]
expected_log_values <- ts(rep(initial_value, length(fitted_values)), start = start(fitted_values), frequency = frequency(fitted_values))
# Adding the elements of this newly created series with the cumulative sum series
expected_log_values <- expected_log_values + fitted_cumsum
# Taking exp of the above series to get the original values
predictions_ARIMA_final <- exp(expected_log_values)
# Plot the results
ggplot(data = df1, aes(x = as.Date(df1$week))) +
geom_line(aes(y = AveragePrice, color = "AveragePrice")) +
geom_line(aes(y = predictions_ARIMA_final, color = "Fitted AveragePrice")) +
labs(title = sprintf("RMSE: %.4f", sqrt(mean((predictions_ARIMA_final - df1$AveragePrice)^2))),
y = "Average Price",
x = "Date") +
scale_color_manual(name = "Legend", values = c("AveragePrice" = "blue", "Fitted AveragePrice" = "red")) +
theme_minimal()
